plot(cv1);plot(cv.5);plot(cv0)
plot(log(cv1$lambda),cv1$cvm,pch=19,col="red",xlab="log(Lambda)",ylab=cv1$name)
points(log(cv.5$lambda),cv.5$cvm,pch=19,col="grey")
points(log(cv0$lambda),cv0$cvm,pch=19,col="blue")
legend("topleft",legend=c("alpha= 1","alpha= .5","alpha 0"),pch=19,col=c("red","grey","blue"))
#running Binomial logistic regression on outcome of home win (1,0)
X<-as.matrix(train[,-c(1,18)])
Y<-train[,1]
testX<-as.matrix(test[,-c(1,18)])
testY<-test[,1]
fit.lasso.cv.logit<-cv.glmnet(X, Y, type.measure = "mse", alpha=1, family="binomial")
fit.lasso.best.logit<-glmnet(X,Y,family = "binomial", alpha=1, lambda=fit.lasso.cv.logit$lambda.min)
fit.lasso.pred.logit<-predict(fit.lasso.best.logit, testX, type="class")
sum(fit.lasso.pred.logit=testY)/length(testY)
#the logistic regression for all 3 categories is better at predicting the outcome.
#support Vector Machine with radial kernel
library(e1071)
svmfit<-svm(homeOutcome~homeBuildUpPlaySpeed+ homeBuildUpPlayPassing+homeChanceCreationPassing+homeChanceCreationCrossing+homeChanceCreationShooting+ homeDefencePressure+homeDefenceAggression+homeDefenceTeamWidth+awayBuildUpPlaySpeed+awayBuildUpPlayPassing+awayChanceCreationPassing+awayChanceCreationCrossing+awayChanceCreationShooting+awayDefencePressure+awayDefenceAggression+awayDefenceTeamWidth, data=train, kernel = "radial", cost=2, scale=FALSE)
tune.out<-tune(svm, homeOutcome~homeBuildUpPlaySpeed+ homeBuildUpPlayPassing+homeChanceCreationPassing+homeChanceCreationCrossing+homeChanceCreationShooting+ homeDefencePressure+homeDefenceAggression+homeDefenceTeamWidth+awayBuildUpPlaySpeed+awayBuildUpPlayPassing+awayChanceCreationPassing+awayChanceCreationCrossing+awayChanceCreationShooting+awayDefencePressure+awayDefenceAggression+awayDefenceTeamWidth,data=train, kernal="radial", ranges=list(cost=c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
summary(tune.out)
bestmod = tune.out$best.model
summary(bestmod)
ypred = predict(bestmod, test)
table(predict = ypred, truth = test$homeOutcome)
(34+4+176)/456
library(caret)
library(kernlab)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(3233)
svm_Linear <- train(homeOutcome~.-1, data=train, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
lvm_Linear
svm_Linear
test_SVM_pred<-predict(svm_Linear, newdata=test)
test_SVM_pred
confusionMatrix(test_SVM_pred, test$homeOutcome)
svm_Linear <- train(homeOutcome~.-1, data=train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
test_SVM_pred<-predict(svm_Linear, newdata=test)
confusionMatrix(test_SVM_pred, test$homeOutcome)
svm_Linear <- train(homeOutcome~.-1, data=train, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
test_SVM_pred<-predict(svm_Linear, newdata=test)
confusionMatrix(test_SVM_pred, test$homeOutcome)
test_SVM_pred<-predict(svm_Radial, newdata=test)
svm_Radial <- train(homeOutcome~.-1, data=train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_Radial <- train(homeOutcome~.-1, data=train, method = "svmRadial",trControl=trctrl, preProcess = c("center", "scale"), tuneLength = 10)
plot(svm_Radial)
test_SVM_pred<-predict(svm_Radial, newdata=test)
confusionMatrix(test_SVM_pred, test$homeOutcome)
grid_radial<- expand.grid(sigma = c(0,0.01, 0.02, 0.025, 0.03, 0.04,
0.05, 0.06, 0.07,0.08, 0.09, 0.1, 0.25, 0.5, 0.75,0.9),
C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75,
1, 1.5, 2,5))> set.seed(3233)
grid_radial<- expand.grid(sigma = c(0,0.01, 0.02, 0.025, 0.03, 0.04,
0.05, 0.06, 0.07,0.08, 0.09, 0.1, 0.25, 0.5, 0.75,0.9),
C = c(0,0.01, 0.05, 0.1, 0.25, 0.5, 0.75,
1, 1.5, 2,5))
set.seed(3233)
svm_Radial_Grid <- train(homeOutcome ~.-1, data = train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center","scale"),
tuneGrid = grid_radial,
tuneLength = 10)
svm_Radial_Grid
svm_Radial_Grid<- train(homeOutcome ~.-1, data = train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center","scale"),
tuneGrid = grid_radial,
tuneLength = 10)
grid_radial<- expand.grid(sigma = c(0,0.01, 0.02, 0.025, 0.03, 0.04,
0.05, 0.06, 0.07,0.08, 0.09, 0.1, 0.25, 0.5, 0.75,0.9),
C = c(0.05, 0.1, 0.25, 0.5, 0.75))
set.seed(3233)
svm_Radial_Grid<- train(homeOutcome ~.-1, data = train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center","scale"),
tuneGrid = grid_radial,
tuneLength = 10)
grid_radial<- expand.grid(sigma = c(0,0.01,
0.05, 0.1, 0.5, 0.75,0.9),
C = 1)
set.seed(3233)
svm_Radial_Grid<- train(homeOutcome ~.-1, data = train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center","scale"),
tuneGrid = grid_radial,
tuneLength = 10)
svm_Radial_Grid
grid_radial<- expand.grid(sigma = c(0.01,0.02,0.03,0.04
0.05),
grid_radial<- expand.grid(sigma = c(0.01,0.02,0.03,0.04,
0.05),
C = 1)
set.seed(3233)
svm_Radial_Grid<- train(homeOutcome ~.-1, data = train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center","scale"),
tuneGrid = grid_radial,
tuneLength = 10)
svm_Radial_Grid
grid_radial<- expand.grid(sigma = .01,
C = c(0.25,0.5,0.75,1))
set.seed(3233)
svm_Radial_Grid<- train(homeOutcome ~.-1, data = train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center","scale"),
tuneGrid = grid_radial,
tuneLength = 10)
svm_Radial_Grid
grid_radial<- expand.grid(sigma = .01,
C = c(0.05,0.1,0.25))
set.seed(3233)
svm_Radial_Grid<- train(homeOutcome ~.-1, data = train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center","scale"),
tuneGrid = grid_radial,
tuneLength = 10)
svm_Radial_Grid
View(matchTeamAttHome)
View(matchTeamAttHome)
trctrlB <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(8)
svm_Linear <- train(homeWin~.-18, data=train, method = "svmLinear",
trControl=trctrl,
preProcess = c("center", "scale"),
tuneLength = 10)
svm_Linear <- train(homeWin~.-18, data=train, method = "svmRadial",
trControl=trctrlB,
preProcess = c("center", "scale"),
tuneLength = 10)
#Using support vector machine for binomial categorical data
trctrlB <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(8)
svm_RadialB <- train(homeWin~.-18, data=train, method = "svmRadial", trControl=trctrlB, preProcess = c("center", "scale"), tuneLength = 10)
svm_RadialB <- train(homeWin~.-18, data=train, method = "svmRadial", trControl=trctrlB, preProcess = c("center", "scale"), tuneLength = 10)
#multinomial logistic regression
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
set.seed(3233)
multiLogit<-train(homeOutcome~homeBuildUpPlaySpeed+ homeBuildUpPlayPassing+homeChanceCreationPassing+homeChanceCreationCrossing+homeChanceCreationShooting+ homeDefencePressure+homeDefenceAggression+homeDefenceTeamWidth+awayBuildUpPlaySpeed+awayBuildUpPlayPassing+awayChanceCreationPassing+awayChanceCreationCrossing+awayChanceCreationShooting+awayDefencePressure+awayDefenceAggression+awayDefenceTeamWidth, data=train, method="glm", family="multivariate")
multiLogit<-train(homeWin~homeBuildUpPlaySpeed+ homeBuildUpPlayPassing+homeChanceCreationPassing+homeChanceCreationCrossing+homeChanceCreationShooting+ homeDefencePressure+homeDefenceAggression+homeDefenceTeamWidth+awayBuildUpPlaySpeed+awayBuildUpPlayPassing+awayChanceCreationPassing+awayChanceCreationCrossing+awayChanceCreationShooting+awayDefencePressure+awayDefenceAggression+awayDefenceTeamWidth, data=train, method="glm", family="bivariate")
multiLogit<-train(homeWin~homeBuildUpPlaySpeed+ homeBuildUpPlayPassing+homeChanceCreationPassing+homeChanceCreationCrossing+homeChanceCreationShooting+ homeDefencePressure+homeDefenceAggression+homeDefenceTeamWidth+awayBuildUpPlaySpeed+awayBuildUpPlayPassing+awayChanceCreationPassing+awayChanceCreationCrossing+awayChanceCreationShooting+awayDefencePressure+awayDefenceAggression+awayDefenceTeamWidth, data=train, method="glm", family=binomial())
class(train$homeWin)
#multinomial logistic regression with binary calsifier homeWin and repeat CV
train$homeWin<-as.factor(train$homeWin)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
logit<-train(homeWin~homeBuildUpPlaySpeed+ homeBuildUpPlayPassing+homeChanceCreationPassing+homeChanceCreationCrossing+homeChanceCreationShooting+ homeDefencePressure+homeDefenceAggression+homeDefenceTeamWidth+awayBuildUpPlaySpeed+awayBuildUpPlayPassing+awayChanceCreationPassing+awayChanceCreationCrossing+awayChanceCreationShooting+awayDefencePressure+awayDefenceAggression+awayDefenceTeamWidth, data=train, method="glm", family=binomial())
logit<-train(homeWin~homeBuildUpPlaySpeed+ homeBuildUpPlayPassing+homeChanceCreationPassing+homeChanceCreationCrossing+homeChanceCreationShooting+ homeDefencePressure+homeDefenceAggression+homeDefenceTeamWidth+awayBuildUpPlaySpeed+awayBuildUpPlayPassing+awayChanceCreationPassing+awayChanceCreationCrossing+awayChanceCreationShooting+awayDefencePressure+awayDefenceAggression+awayDefenceTeamWidth, data=train, method="glm", family=binomial(), trControl=trctrl)
logit
logit<-train(homeWin~.-18, data=train, method="glm", family=binomial(), trControl=trctrl)
logit<-train(homeWin~homeBuildUpPlaySpeed+ homeBuildUpPlayPassing+homeChanceCreationPassing+homeChanceCreationCrossing+homeChanceCreationShooting+ homeDefencePressure+homeDefenceAggression+homeDefenceTeamWidth+awayBuildUpPlaySpeed+awayBuildUpPlayPassing+awayChanceCreationPassing+awayChanceCreationCrossing+awayChanceCreationShooting+awayDefencePressure+awayDefenceAggression+awayDefenceTeamWidth, data=train, method="glm", family=binomial(), trControl=trctrl)
logit
varImp(logit)
#predict
logit_pred<-predict(logit,test)
#confusion Matrix
confusionMatrix(logit_pred, test$homeWin)
test$homeWin<-as.factor(test$homeWin)
#confusion Matrix
confusionMatrix(logit_pred, test$homeWin)
(34+4+176)/456
#support vector machine using repeating k-fold at 10 for categorical Y at 3 levels
library(caret)
library(kernlab)
trctrl <- trainControl(method = "cv", number = 10, repeats = 3)
set.seed(3233)
svm_Radial <- train(homeOutcome~.-1, data=train, method = "svmRadial",trControl=trctrl, preProcess = c("center", "scale"), tuneLength = 10)
plot(svm_Radial)
test_SVM_pred<-predict(svm_Radial, newdata=test)
confusionMatrix(test_SVM_pred, test$homeOutcome)
grid_radial<- expand.grid(sigma = .01,
C = c(0.05,0.1,0.25))
set.seed(3233)
svm_Radial_Grid<- train(homeOutcome ~.-1, data = train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center","scale"),
tuneGrid = grid_radial,
tuneLength = 10)
svm_Radial_Grid
trctrl <- trainControl(method = "recusivecv", number = 10, repeats = 3)
svm_Radial <- train(homeOutcome~.-1, data=train, method = "svmRadial",trControl=trctrl, preProcess = c("center", "scale"), tuneLength = 10)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svm_Radial <- train(homeOutcome~.-1, data=train, method = "svmRadial",trControl=trctrl, preProcess = c("center", "scale"), tuneLength = 10)
test_SVM_pred<-predict(svm_Radial, newdata=test)
confusionMatrix(test_SVM_pred, test$homeOutcome)
grid_radial<- expand.grid(sigma = .01,
C = c(0.05,0.1,0.25))
svm_Radial_Grid<- train(homeOutcome ~.-1, data = train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center","scale"),
tuneGrid = grid_radial,
tuneLength = 10)
svm_Radial_Grid<- train(homeOutcome ~.-1, data = train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center","scale"),
tuneGrid = grid_radial,
tuneLength = 10)
svm_Radial_Grid
trctrl_logitB<- trainControl(method = "repeatedcv", number = 10, repeats = 3, classProbs = TRUE, summaryFunction = twoClassSummary)
#train
logitB<-train(homeWin~homeBuildUpPlaySpeed+ homeBuildUpPlayPassing+homeChanceCreationPassing+homeChanceCreationCrossing+homeChanceCreationShooting+ homeDefencePressure+homeDefenceAggression+homeDefenceTeamWidth+awayBuildUpPlaySpeed+awayBuildUpPlayPassing+awayChanceCreationPassing+awayChanceCreationCrossing+awayChanceCreationShooting+awayDefencePressure+awayDefenceAggression+awayDefenceTeamWidth, data=train, method="glm", family=binomial(), trControl=trctrl)
#variable importance
varImp(logit)
#predict
logit_pred<-predict(logit,test)
#confusion Matrix
confusionMatrix(logit_pred, test$homeWin)
#support vector machine using repeating k-fold at 10 for categorical Y at 3 levels
library(caret)
library(kernlab)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
svm_Radial <- train(homeOutcome~.-1, data=train, method = "svmRadial",trControl=trctrl, preProcess = c("center", "scale"), tuneLength = 10)
plot(svm_Radial)
test_SVM_pred<-predict(svm_Radial, newdata=test)
confusionMatrix(test_SVM_pred, test$homeOutcome)
#customizing grid
grid_radial<- expand.grid(sigma = .01,
C = c(0.05,0.1,0.25))
svm_Radial_Grid<- train(homeOutcome ~.-1, data = train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center","scale"),
tuneGrid = grid_radial,
tuneLength = 10)
svm_Radial_Grid
multiLogit <- train(homeOutcome~.-1, data=train, method = "multinom", trControl=trctrl)
plot(multiLogit)
confusionMatrix(multiLogit_pred, test$homeOutcome)
multiLogit_pred<-predict(multiLogit, newdata=test)
confusionMatrix(multiLogit_pred, test$homeOutcome)
#Using support vector machine for binomial categorical data
trctrlB <- trainControl(method = "repeatedcv", number = 10, repeats = 3, classProbs = TRUE)
svm_RadialB <- train(homeWin~.-18, data=train, method = "svmRadial", trControl=trctrlB, preProcess = c("center", "scale"), tuneLength = 10)
svm_RadialB <- train(homeWin~homeBuildUpPlaySpeed+ homeBuildUpPlayPassing+homeChanceCreationPassing+homeChanceCreationCrossing+homeChanceCreationShooting+ homeDefencePressure+homeDefenceAggression+homeDefenceTeamWidth+awayBuildUpPlaySpeed+awayBuildUpPlayPassing+awayChanceCreationPassing+awayChanceCreationCrossing+awayChanceCreationShooting+awayDefencePressure+awayDefenceAggression+awayDefenceTeamWidth, data=train, method = "svmRadial", trControl=trctrlB, preProcess = c("center", "scale"), tuneLength = 10)
#Support vector machine for binomial categorical data using repeated CV
train$homeWin<-as.factor(train$homeWin)
test$homeWin<-as.factor(test$homeWin)
trctrlB <- trainControl(method = "repeatedcv", number = 10, repeats = 3, classProbs = TRUE)
svm_RadialB <- train(homeWin~homeBuildUpPlaySpeed+ homeBuildUpPlayPassing+homeChanceCreationPassing+homeChanceCreationCrossing+homeChanceCreationShooting+ homeDefencePressure+homeDefenceAggression+homeDefenceTeamWidth+awayBuildUpPlaySpeed+awayBuildUpPlayPassing+awayChanceCreationPassing+awayChanceCreationCrossing+awayChanceCreationShooting+awayDefencePressure+awayDefenceAggression+awayDefenceTeamWidth, data=train, method = "svmRadial", trControl=trctrlB, preProcess = c("center", "scale"), tuneLength = 10)
print(homeWin)
print(train$homeWin)
class(train$homeWin)
trctrlB <- trainControl(method = "repeatedcv", number = 10, repeats = 3, classProbs = TRUE)
svm_RadialB <- train(homeWin~homeBuildUpPlaySpeed+ homeBuildUpPlayPassing+homeChanceCreationPassing+homeChanceCreationCrossing+homeChanceCreationShooting+ homeDefencePressure+homeDefenceAggression+homeDefenceTeamWidth+awayBuildUpPlaySpeed+awayBuildUpPlayPassing+awayChanceCreationPassing+awayChanceCreationCrossing+awayChanceCreationShooting+awayDefencePressure+awayDefenceAggression+awayDefenceTeamWidth, data=train, method = "svmRadial", trControl=trctrlB, preProcess = c("center", "scale"), tuneLength = 10)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3, classProbs = TRUE, metric"ROC")
#support vector machine using repeating k-fold at 10 for categorical Y at 3 levels
library(caret)
library(kernlab)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3, classProbs = TRUE, metric="ROC")
#support vector machine using repeating k-fold at 10 for categorical Y at 3 levels
library(caret)
library(kernlab)
trctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3, classProbs = TRUE)
svm_Radial <- train(homeOutcome~.-1, data=train, method = "svmRadial",trControl=trctrl, preProcess = c("center", "scale"), tuneLength = 10)
plot(svm_Radial)
test_SVM_pred<-predict(svm_Radial, newdata=test)
confusionMatrix(test_SVM_pred, test$homeOutcome)
#customizing grid
grid_radial<- expand.grid(sigma = .01,
C = c(0.05,0.1,0.25))
svm_Radial_Grid<- train(homeOutcome ~.-1, data = train, method = "svmRadial",
trControl=trctrl,
preProcess = c("center","scale"),
tuneGrid = grid_radial,
tuneLength = 10)
svm_Radial_Grid
trctrlB <- trainControl(method = "repeatedcv", number = 10, repeats = 3, classProbs = TRUE)
svm_RadialB <- train(homeWin~.-18, data=train, method = "svmRadial", trControl=trctrlB, preProcess = c("center", "scale"), tuneLength = 10)
View(train)
#k nearest neighbors
trctrl_NN<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
knn_fit<-train(homeOutcome~.-1, data=train, method="knn", trControl=trctrl_NN, preProcess=c("center", scale), tuneLength=10)
#k nearest neighbors
train$homeOutcome<-as.factor(train$homeOutcome)
trctrl_NN<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
knn_fit<-train(homeOutcome~.-1, data=train, method="knn", trControl=trctrl_NN, preProcess=c("center", scale), tuneLength=10)
class(train)
train<-as.matrix(train[,])
knn_fit<-train(homeOutcome~.-1, data=train, method="knn", trControl=trctrl_NN, preProcess=c("center", scale), tuneLength=10)
train<-as.list(train[,])
knn_fit<-train(homeOutcome~.-1, data=train, method="knn", trControl=trctrl_NN, preProcess=c("center", scale), tuneLength=10)
View(train)
#splitting into training and testing randomly with %80 in training and 20% in testing
set.seed(123)
sample <- sample.int(n = nrow(matchTeamAttHA), size = floor(.80*nrow(matchTeamAttHA)), replace = F)
train<- matchTeamAttHA[sample, ]
test<- matchTeamAttHA[-sample, ]
#removing extra columns, leaving only y and X
train<-train[,-c(1:9,11:16, 25)]
test<-test[,-c(1:9,11:16,25)]
knn_fit<-train(homeOutcome~homeBuildUpPlaySpeed+ homeBuildUpPlayPassing+homeChanceCreationPassing+homeChanceCreationCrossing+homeChanceCreationShooting+ homeDefencePressure+homeDefenceAggression+homeDefenceTeamWidth+awayBuildUpPlaySpeed+awayBuildUpPlayPassing+awayChanceCreationPassing+awayChanceCreationCrossing+awayChanceCreationShooting+awayDefencePressure+awayDefenceAggression+awayDefenceTeamWidth, data=train, method="knn", trControl=trctrl_NN, preProcess=c("center", scale), tuneLength=10)
knn_fit<-train(homeOutcome~.-1, data=train, method="knn", trControl=trctrl_NN, preProcess=c("center", scale), tuneLength=10)
#k nearest neighbors
library(caret)
train<-as.list(train[,])
trctrl_NN<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
knn_fit<-train(homeOutcome~.-1, data=train, method="knn", trControl=trctrl_NN, preProcess=c("center", scale), tuneLength=10)
train
knn_fit<-train(homeOutcome~.-`homeWin`, data=train, method="knn", trControl=trctrl_NN, preProcess=c("center", scale), tuneLength=10)
#splitting into training and testing randomly with %80 in training and 20% in testing
set.seed(123)
sample <- sample.int(n = nrow(matchTeamAttHA), size = floor(.80*nrow(matchTeamAttHA)), replace = F)
train<- matchTeamAttHA[sample, ]
test<- matchTeamAttHA[-sample, ]
#removing extra columns, leaving only y and X
train<-train[,-c(1:9,11:16, 25)]
test<-test[,-c(1:9,11:16,25)]
X<-as.data.frame(table(unlist(train)))
X
X<-as.data.frame(unlist(train))
X
class(train)
X<-unlist(train[,])
X
X<-unlist(train[,-1])
X
knn_fit<-train(homeOutcome~.X, data=train, method="knn", trControl=trctrl_NN, preProcess=c("center", scale), tuneLength=10)
knn_fit<-train(homeOutcome~X, data=train, method="knn", trControl=trctrl_NN, preProcess=c("center", scale), tuneLength=10)
X
length(homeOutcome)
length(train$homeOutcome)
knn_fit<-train(homeOutcome~X, data=train, method="knn", trControl=trctrl_NN)
length(X)
length(train$homeOutcome)
X<-unlist(train[,-c(1,18)])
length(train$homeOutcome)
trctrl_NN<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
knn_fit<-train(homeOutcome~X, data=train, method="knn", trControl=trctrl_NN)
knn_fit<-train(homeOutcome~., data=train, method="knn", trControl=trctrl_NN)
X<-train[,-18]
trctrl_NN<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
View(X)
X<-train[,-1]
trctrl_NN<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
knn_fit<-train(homeOutcome~., data=X, method="knn", trControl=trctrl_NN)
class(train)
knn_fit<-train(homeOutcome~., data=X, method="knn", trControl=trctrl_NN, preProcess=c("center","scale"))
knn_fit<-train(homeOutcome~., data=X, method="knn", trControl=trctrl_NN, preProcess=c("center","scale"), tuneLength=10)
knn_fit
plot(knn_fit)
#prediction
knn_pred<-predict(knn_fit, newdata=test)
knn_pred
#confusion Matrix
confusionMatrix(knn_pred, test$homeOutcome)
#training
lda_fit<-train(homeOutcome~., data=X, method="lda", trControl=trctrl_lda, classProbs=TRUE)
trctrl_lda<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#training
lda_fit<-train(homeOutcome~., data=X, method="lda", trControl=trctrl_lda, classProbs=TRUE)
#Linear discriminant analysis
X<-train[,-1]
trctrl_lda<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#training
lda_fit<-train(homeOutcome~., data=X, method="lda", trControl=trctrl_lda, classProbs=TRUE)
#Linear discriminant analysis
X<-train[,c(-1,-18)]
#training
lda_fit<-train(homeOutcome~., data=X, method="lda", trControl=trctrl_lda, classProbs=TRUE)
#Linear discriminant analysis
X<-train[,-1]
#training
lda_fit<-train(homeOutcome~., data=X, method="lda", trControl=trctrl_lda, preProcess = c("center", "scale"),classProbs=TRUE)
#training
lda_fit<-train(homeOutcome~., data=train, method="lda", trControl=trctrl_lda, preProcess = c("center", "scale"),classProbs=TRUE)
#training
lda_fit<-train(homeOutcome~., data=X, method="lda", trControl=trctrl_lda, preProcess = c("center", "scale"))
lda_fit
plot(knn_fit)
plot(lda_fit)
#training
lda_fit<-train(homeOutcome~., data=X, method="lda", trControl=trctrl_lda, preProcess = c("center", "scale"),tuneLength=10)
lda_fit
plot(lda_fit)
#prediction
lda_pred<-predict(lda_fit, newdata=test)
#prediction
lda_pred<-predict(lda_fit, newdata=test, preProcValues)
#prediction
lda_pred<-predict(lda_fit, newdata=test)
#confusion Matrix
confusionMatrix(lda_pred, test$homeOutcome)
lda_fit
lda_pred
#confusion Matrix
confusionMatrix(lda_pred, test$homeOutcome)
#Linear discriminant analysis
X<-train[,-1]
trctrl_lda<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#training
lda_fit<-train(homeOutcome~., data=X, method="lda", trControl=trctrl_lda, preProcess = c("center", "scale"))
lda_fit
#prediction
lda_pred<-predict(lda_fit, newdata=test)
#confusion Matrix
confusionMatrix(lda_pred, test$homeOutcome)
trctrl_qda<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#Linear discriminant analysis
require(MASS)
#Linear discriminant analysis
require(MASS)
X<-train[,-1]
trctrl_lda<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#training
lda_fit<-train(homeOutcome~., data=X, method="lda", trControl=trctrl_lda, preProcess = c("center", "scale"))
lda_fit
#prediction
lda_pred<-predict(lda_fit, newdata=test)
#confusion Matrix
confusionMatrix(lda_pred, test$homeOutcome)
#training
qda_fit<-train(homeOutcome~., data=X, method="qda", trControl=trctrl_lda, preProcess = c("center", "scale"))
lda_fit
#prediction
lda_pred<-predict(lda_fit, newdata=test)
#confusion Matrix
confusionMatrix(lda_pred, test$homeOutcome)
#prediction
qda_pred<-predict(qda_fit, newdata=test)
#confusion Matrix
confusionMatrix(qda_pred, test$homeOutcome)
rctrl_qda<-rfeControl(method = "repeatedcv", number = 10, repeats = 3, functions = caretSBF, saveDetails = TRUE)
trctrl_qda<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
rctrl_qda<-rfeControl(method = "repeatedcv", number = 10, repeats = 3, functions = caretSBF, saveDetails = TRUE)
model<-rfe(homeOutcome~., data=X, method="qda", trControl=trainControl(method = "repeatedcv", number = 10, repeats = 3))
rctrl_qda<-rfeControl(method = "repeatedcv", number = 10, repeats = 3, functions = caretSBF, saveDetails = TRUE)
model<-rfe(homeOutcome~., data=X, method="qda", trControl=trainControl(method = "repeatedcv", number = 10, repeats = 3))
model<-rfe(homeOutcome~., data=X, method="qda", trControl=trainControl(method = "repeatedcv", number = 10, repeats = 3), refControl=rctrl_qda)
#quadratic discriminant analysis
X<-train[,-1]
trctrl_qda<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#training
qda_fit<-train(homeOutcome~., data=X, method="qda", trControl=trctrl_lda, preProcess = c("center", "scale"))
lda_fit
#prediction
qda_pred<-predict(qda_fit, newdata=test)
#confusion Matrix
confusionMatrix(qda_pred, test$homeOutcome)
trctrl_tree<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#training
tree_fit<-train(homeOutcome~., data=X, method="rpart", trControl=trctrl_tree, preProcess = c("center", "scale"))
tree_fit
#training
tree_fit<-train(homeOutcome~., data=X, method="rpart", trControl=trctrl_tree, preProcess = c("center", "scale"),metric="ROC")
#training
tree_fit<-train(homeOutcome~., data=X, method="rpart", trControl=trctrl_tree, preProcess = c("center", "scale"), tunrLength=20)
#training
tree_fit<-train(homeOutcome~., data=X, method="rpart", trControl=trctrl_tree, preProcess = c("center", "scale"))
tree_fit
#prediction
tre_pred<-predict(tree_fit, newdata=test)
#confusion Matrix
confusionMatrix(tree_pred, test$homeOutcome)
#prediction
tree_pred<-predict(tree_fit, newdata=test)
#confusion Matrix
confusionMatrix(tree_pred, test$homeOutcome)
#decision tree
require(randomForest)
#training
rf_fit<-train(homeOutcome~., data=X, method="rpart", trControl=trctr_rf, preProcess = c("center", "scale"))
#training
rf_fit<-train(homeOutcome~., data=X, method="rpart", trControl=trctrl_rf, preProcess = c("center", "scale"))
trctrl_rf<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#training
rf_fit<-train(homeOutcome~., data=X, method="rpart", trControl=trctrl_rf, preProcess = c("center", "scale"))
tree_fit
#prediction
rd_pred<-predict(rf_fit, newdata=test)
rf_pred
#prediction
rf_pred<-predict(rf_fit, newdata=test)
rf_pred
#confusion Matrix
confusionMatrix(rf_pred, test$homeOutcome)
trctrl_rf<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#training
rf_fit<-train(homeOutcome~., data=X, method="rf", trControl=trctrl_rf, tuneLength=10)
X<-train[,-1]
trctrl_rf<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#training
tree_fit<-train(homeOutcome~., data=X, method="rpart", trControl=trctrl_rf)
tree_fit
#prediction
tree_pred<-predict(tree_fit, newdata=test)
#confusion Matrix
confusionMatrix(tree_pred, test$homeOutcome)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
rpart.plot(tree_fit$finalModel)
trctrl_tree<- trainControl(method = "repeatedcv", number = 10, repeats = 3)
#training
rf_fit<-train(homeOutcome~., data=X, method="rf", trControl=trctrl_rf)
tree_fit
rf_fit
#prediction
rf_pred<-predict(rf_fit, newdata=test)
#confusion Matrix
confusionMatrix(rf_pred, test$homeOutcome)
rpart.plot(rf_fit$finalModel)
rf_fit
#training
rf_fit<-train(homeOutcome~., data=X, method="ranger", trControl=trctrl_rf)
